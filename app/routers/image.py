"""
FastAPI Routes cho x·ª≠ l√Ω ·∫£nh v·ªõi NAFNet
"""

import os
import uuid
from pathlib import Path
from typing import Optional
import logging

from fastapi import APIRouter, UploadFile, File, HTTPException, Form
from fastapi.responses import FileResponse, HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi import Request

from app.services.model_loader import get_model_handler
from ..services.image_processor import get_image_processor

# C·∫•u h√¨nh logging - ch·ªâ ghi v√†o file
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("app.log", encoding='utf-8'),
    ]
)
logger = logging.getLogger(__name__)

# Router
router = APIRouter(prefix="/api/v1", tags=["image"])

# Templates
templates = Jinja2Templates(directory="app/templates")

# ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c
UPLOAD_DIR = Path("app/static/uploads")
RESULT_DIR = Path("app/static/results")

# T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
UPLOAD_DIR.mkdir(parents=True, exist_ok=True)
RESULT_DIR.mkdir(parents=True, exist_ok=True)

# Kh·ªüi t·∫°o services
model_handler = None
image_processor = None

def initialize_services():
    """Kh·ªüi t·∫°o c√°c services"""
    global model_handler, image_processor
    
    if model_handler is None:
        # T√¨m model file
        model_path = None
        for ext in ['.pth', '.pt', '.pkl']:
            model_files = list(Path("models").glob(f"*{ext}"))
            if model_files:
                model_path = model_files[0]
                break
        
        model_handler = get_model_handler(model_path)
        logger.info(f"Model handler ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o: {model_handler.get_model_info()}")
    
    if image_processor is None:
        image_processor = get_image_processor(max_size=1024)
        logger.info("Image processor ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o")

@router.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """Trang ch·ªß v·ªõi form upload ·∫£nh"""
    logger.info("üè† Truy c·∫≠p trang ch·ªß")
    return templates.TemplateResponse("index.html", {"request": request})

@router.post("/upload")
async def upload_and_process_image(
    file: UploadFile = File(...),
    model_name: Optional[str] = Form(None)
):
    """
    Upload v√† x·ª≠ l√Ω ·∫£nh v·ªõi NAFNet
    
    Args:
        file: File ·∫£nh upload
        model_name: T√™n model (optional)
    
    Returns:
        JSON response v·ªõi th√¥ng tin x·ª≠ l√Ω
    """
    try:
        logger.info(f"üì§ Nh·∫≠n request upload file: {file.filename}")
        logger.info(f"üìè K√≠ch th∆∞·ªõc file: {file.size if hasattr(file, 'size') else 'unknown'} bytes")
        
        # Kh·ªüi t·∫°o services n·∫øu ch∆∞a c√≥
        logger.info("üîß ƒêang kh·ªüi t·∫°o services...")
        initialize_services()
        
        # Ki·ªÉm tra file
        if not file.filename:
            logger.error("‚ùå Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn")
            raise HTTPException(status_code=400, detail="Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn")
        
        # Ki·ªÉm tra extension
        allowed_extensions = {'.jpg', '.jpeg', '.png', '.JPG', '.JPEG', '.PNG'}
        file_ext = Path(file.filename).suffix
        if file_ext not in allowed_extensions:
            logger.error(f"‚ùå ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: {file_ext}")
            raise HTTPException(
                status_code=400, 
                detail=f"ƒê·ªãnh d·∫°ng file kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£. Ch·ªâ ch·∫•p nh·∫≠n: {', '.join(allowed_extensions)}"
            )
        
        logger.info(f"‚úÖ File h·ª£p l·ªá: {file.filename} ({file_ext})")
        
        # T·∫°o t√™n file unique
        file_id = str(uuid.uuid4())
        input_filename = f"{file_id}{file_ext}"
        output_filename = f"{file_id}_processed{file_ext}"
        
        input_path = UPLOAD_DIR / input_filename
        output_path = RESULT_DIR / output_filename
        
        logger.info(f"üÜî File ID: {file_id}")
        logger.info(f"üìÅ Input path: {input_path}")
        logger.info(f"üìÅ Output path: {output_path}")
        
        # L∆∞u file upload
        logger.info("üíæ ƒêang l∆∞u file upload...")
        with open(input_path, "wb") as buffer:
            content = await file.read()
            buffer.write(content)
        
        file_size_mb = len(content) / (1024 * 1024)
        logger.info(f"‚úÖ File ƒë√£ ƒë∆∞·ª£c l∆∞u: {input_path} ({file_size_mb:.2f} MB)")
        
        # Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ·∫£nh
        logger.info("üîç ƒêang ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa ·∫£nh...")
        if not image_processor.validate_image(input_path):
            # X√≥a file n·∫øu kh√¥ng h·ª£p l·ªá
            input_path.unlink(missing_ok=True)
            logger.error("‚ùå File ·∫£nh kh√¥ng h·ª£p l·ªá, ƒë√£ x√≥a file")
            raise HTTPException(status_code=400, detail="File ·∫£nh kh√¥ng h·ª£p l·ªá")
        
        logger.info("‚úÖ ·∫¢nh h·ª£p l·ªá, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
        
        # X·ª≠ l√Ω ·∫£nh
        logger.info(f"üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω ·∫£nh: {input_filename}")
        result = image_processor.process_image_file(
            input_path=input_path,
            output_path=output_path,
            model_handler=model_handler
        )
        
        if not result["success"]:
            # X√≥a file n·∫øu x·ª≠ l√Ω th·∫•t b·∫°i
            input_path.unlink(missing_ok=True)
            output_path.unlink(missing_ok=True)
            logger.error(f"‚ùå X·ª≠ l√Ω ·∫£nh th·∫•t b·∫°i: {result.get('error', 'Unknown error')}")
            raise HTTPException(status_code=500, detail=f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {result.get('error', 'Unknown error')}")
        
        # Log th√¥ng tin x·ª≠ l√Ω
        logger.info(f"‚úÖ X·ª≠ l√Ω ·∫£nh ho√†n th√†nh: {file_id}")
        logger.info(f"‚è±Ô∏è  Th·ªùi gian x·ª≠ l√Ω: {result['total_time']:.3f}s")
        logger.info(f"üìê K√≠ch th∆∞·ªõc g·ªëc: {result['original_size']}")
        logger.info(f"üìê K√≠ch th∆∞·ªõc sau x·ª≠ l√Ω: {result['processed_size']}")
        logger.info(f"ü§ñ Model: {result['model_info']['model_name']}")
        
        # Tr·∫£ v·ªÅ k·∫øt qu·∫£
        response_data = {
            "success": True,
            "file_id": file_id,
            "original_filename": file.filename,
            "input_url": f"/static/uploads/{input_filename}",
            "output_url": f"/static/results/{output_filename}",
            "processing_info": {
                "original_size": result["original_size"],
                "processed_size": result["processed_size"],
                "preprocessing_time": result["preprocessing_time"],
                "model_processing_time": result["model_processing_time"],
                "total_time": result["total_time"]
            },
            "model_info": result["model_info"]
        }
        
        logger.info(f"üéâ Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng cho file: {file_id}")
        return response_data
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"L·ªói kh√¥ng mong mu·ªën: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói server: {str(e)}")

@router.get("/result/{file_id}")
async def get_result_image(file_id: str):
    """
    L·∫•y ·∫£nh k·∫øt qu·∫£ theo file_id
    
    Args:
        file_id: ID c·ªßa file ƒë√£ x·ª≠ l√Ω
    
    Returns:
        File ·∫£nh k·∫øt qu·∫£
    """
    try:
        logger.info(f"üì• Request l·∫•y ·∫£nh k·∫øt qu·∫£: {file_id}")
        
        # T√¨m file k·∫øt qu·∫£
        result_files = list(RESULT_DIR.glob(f"{file_id}_processed.*"))
        
        if not result_files:
            logger.warning(f"‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y ·∫£nh k·∫øt qu·∫£ cho file_id: {file_id}")
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y ·∫£nh k·∫øt qu·∫£")
        
        result_file = result_files[0]
        
        if not result_file.exists():
            logger.warning(f"‚ö†Ô∏è  File k·∫øt qu·∫£ kh√¥ng t·ªìn t·∫°i: {result_file}")
            raise HTTPException(status_code=404, detail="File k·∫øt qu·∫£ kh√¥ng t·ªìn t·∫°i")
        
        file_size_mb = result_file.stat().st_size / (1024 * 1024)
        logger.info(f"‚úÖ Tr·∫£ v·ªÅ ·∫£nh k·∫øt qu·∫£: {result_file.name} ({file_size_mb:.2f} MB)")
        
        return FileResponse(
            path=str(result_file),
            media_type="image/jpeg",
            filename=f"processed_{file_id}.jpg"
        )
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y ·∫£nh k·∫øt qu·∫£: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói server: {str(e)}")

@router.get("/model/info")
async def get_model_info():
    """
    L·∫•y th√¥ng tin model hi·ªán t·∫°i
    
    Returns:
        Th√¥ng tin model
    """
    try:
        logger.info("üì• Request l·∫•y th√¥ng tin model")
        initialize_services()
        model_info = model_handler.get_model_info()
        logger.info(f"‚úÖ Tr·∫£ v·ªÅ th√¥ng tin model: {model_info['model_name']}")
        return {
            "success": True,
            "model_info": model_info
        }
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y th√¥ng tin model: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói server: {str(e)}")

@router.post("/model/reload")
async def reload_model(model_path: Optional[str] = Form(None)):
    """
    T·∫£i l·∫°i model
    
    Args:
        model_path: ƒê∆∞·ªùng d·∫´n ƒë·∫øn model m·ªõi (optional)
    
    Returns:
        Th√¥ng tin model m·ªõi
    """
    try:
        global model_handler
        
        if model_path:
            # T·∫£i model t·ª´ ƒë∆∞·ªùng d·∫´n m·ªõi
            from ..services.model_loader import load_model
            model_handler = load_model(model_path)
        else:
            # T·∫£i l·∫°i model hi·ªán t·∫°i
            initialize_services()
        
        logger.info("Model ƒë√£ ƒë∆∞·ª£c t·∫£i l·∫°i")
        return {
            "success": True,
            "message": "Model ƒë√£ ƒë∆∞·ª£c t·∫£i l·∫°i th√†nh c√¥ng",
            "model_info": model_handler.get_model_info()
        }
        
    except Exception as e:
        logger.error(f"L·ªói khi t·∫£i l·∫°i model: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói server: {str(e)}")

@router.delete("/cleanup")
async def cleanup_files():
    """
    D·ªçn d·∫πp c√°c file t·∫°m th·ªùi
    
    Returns:
        Th√¥ng tin d·ªçn d·∫πp
    """
    try:
        logger.info("üßπ B·∫Øt ƒë·∫ßu d·ªçn d·∫πp files...")
        
        # ƒê·∫øm file trong th∆∞ m·ª•c uploads v√† results
        upload_count = len(list(UPLOAD_DIR.glob("*")))
        result_count = len(list(RESULT_DIR.glob("*")))
        
        logger.info(f"üìä T√¨m th·∫•y {upload_count} file uploads v√† {result_count} file results")
        
        # X√≥a t·∫•t c·∫£ file
        for file_path in UPLOAD_DIR.glob("*"):
            if file_path.is_file():
                file_path.unlink()
                logger.info(f"üóëÔ∏è  ƒê√£ x√≥a upload file: {file_path.name}")
        
        for file_path in RESULT_DIR.glob("*"):
            if file_path.is_file():
                file_path.unlink()
                logger.info(f"üóëÔ∏è  ƒê√£ x√≥a result file: {file_path.name}")
        
        total_deleted = upload_count + result_count
        logger.info(f"‚úÖ D·ªçn d·∫πp ho√†n th√†nh: {total_deleted} files ƒë√£ ƒë∆∞·ª£c x√≥a")
        
        return {
            "success": True,
            "message": "D·ªçn d·∫πp ho√†n th√†nh",
            "deleted_files": {
                "uploads": upload_count,
                "results": result_count
            }
        }
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi d·ªçn d·∫πp: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói server: {str(e)}")

@router.get("/health")
async def health_check():
    """
    Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng
    
    Returns:
        Tr·∫°ng th√°i h·ªá th·ªëng
    """
    try:
        logger.info("üè• Health check request")
        initialize_services()
        
        # Ki·ªÉm tra th∆∞ m·ª•c
        upload_exists = UPLOAD_DIR.exists()
        result_exists = RESULT_DIR.exists()
        
        # ƒê·∫øm files
        upload_count = len(list(UPLOAD_DIR.glob("*"))) if upload_exists else 0
        result_count = len(list(RESULT_DIR.glob("*"))) if result_exists else 0
        
        health_status = {
            "status": "healthy",
            "services": {
                "model_handler": model_handler is not None,
                "image_processor": image_processor is not None
            },
            "directories": {
                "uploads_exists": upload_exists,
                "results_exists": result_exists
            },
            "file_counts": {
                "uploads": upload_count,
                "results": result_count
            }
        }
        
        logger.info(f"‚úÖ Health check passed: {health_status}")
        return health_status
        
    except Exception as e:
        logger.error(f"‚ùå Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e)
        }
